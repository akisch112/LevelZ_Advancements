plugins {
    id 'fabric-loom' version '1.6.12'
    id 'maven-publish'
}

group = project.maven_group
version = project.mod_version
archivesBaseName = project.mod_id

repositories {
    maven { url 'https://maven.fabricmc.net/' }
    maven { url 'https://maven.architectury.dev/' }
    maven { url 'https://maven.shedaniel.me/' }
    mavenCentral()
}

dependencies {
    // Core Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    // Automatically include all local JARs in /libs
    def localLibs = fileTree(dir: "libs", include: ["*.jar"])
    println "\nðŸ§© Detected ${localLibs.files.size()} local JAR(s) in /libs:"
    localLibs.files.each { println "   â†’ ${it.name}" }

    localLibs.each { jar ->
        modImplementation files(jar)
    }
}

loom {
    splitEnvironmentSourceSets()

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(project.java_version.toInteger())
    }
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = project.java_version.toInteger()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
